--db.orders.find().sort({ OrderDate: 1 }).limit(1)
--db.employees.aggregate([{$group: {_id: "$Region",count: { $sum: 1 }}},{$sort: { count: -1 }},{$limit: 1}])
--[{$group:{_id: "$ProductID",total_stock: {$sum: "$UnitsInStock",},},},{$group:{_id: null,total_products: {$sum: "$total_stock",},},},]
--db.orderDetails.aggregate([{$group: {_id: "$ProductID", totalQuantity: { $sum: "$Quantity" } }},{$sort: { totalQuantity: -1 }},
{$limit: 1
},{
    $lookup: {
      from: "products",
      localField: "_id",
      foreignField: "ProductID",
      as: "product"
    }
  },
  {
    $unwind: "$product"
  },
  {
    $project: {
      _id: 0,
      productName: "$product.ProductName",
      totalQuantity: 1
    }
  }
])

--[
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$ProductID",
        total: {
          $sum: "$Quantity",
        },
      },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        total: -1,
      },
  },
  {
    $limit:
      /**
       * Provide the number of documents to limit.
       */
      1,
  },
  {
    $lookup:
      /**
       * from: The target collection.
       * localField: The local join field.
       * foreignField: The target join field.
       * as: The name for the results.
       * pipeline: Optional pipeline to run on the foreign collection.
       * let: Optional variables to use in the pipeline field stages.
       */
      {
        from: "Products",
        localField: "_id",
        foreignField: "ProductID",
        as: "Producto",
      },
  },
  {
    $unwind:
      /**
       * path: Path to the array field.
       * includeArrayIndex: Optional name for index.
       * preserveNullAndEmptyArrays: Optional
       *   toggle to unwind null and empty values.
       */
      {
        path: "$Producto",
      },
  },
  {
    $project:
      /**
       * specifications: The fields to
       *   include or exclude.
       */
      {
        _id: 1,
        productName: "$Producto.ProductName",
        total: 1,
      },
  },
]


/Empleado con mayor venta
db.getCollection("OrderDetails").aggregate([
   {
      $group: {
         _id: "$OrderID",
         Total: { $sum: { $multiply: [ "$Quantity", "$UnitPrice", { $subtract: [ 1, "$Discount" ] } ] } }
      }
   },
   {
      $lookup: {
         from: "Orders",
         localField: "_id",
         foreignField: "OrderID",
         as: "Orden"
      }
   },   
   {
      $unwind: "$Orden"
   },
   {
      $lookup: {
         from: "Employees",
         localField: "Orden.EmployeeID",
         foreignField: "EmployeeID",
         as: "Empleado"
      }
   }, 
   {
      $unwind: "$Empleado"
   },
   {
      $group: {
         _id: "$Empleado.EmployeeID",
         totalVentas: { $sum: "$Total" },
         employeeName: { $first: "$Empleado.FirstName" }
      }
   },
   {
      $sort: { "totalVentas": -1 }
   },
   {
      $limit: 1
   }
])
//Empleado con mayor numero de productos vendidos
db.getCollection("OrderDetails").aggregate([
   {
      $group: {
         _id: "$OrderID",
         productos: { $sum:"$Quantity"}
      }
   },
   {
      $lookup: {
         from: "Orders",
         localField: "_id",
         foreignField: "OrderID",
         as: "Orden"
      }
   },   
   {
      $unwind: "$Orden"
   },
   {
      $lookup: {
         from: "Employees",
         localField: "Orden.EmployeeID",
         foreignField: "EmployeeID",
         as: "Empleado"
      }
   }, 
   {
      $unwind: "$Empleado"
   },
   {
      $group: {
         _id: "$Empleado.EmployeeID",
         totalProductos: { $sum: "$productos" },
         employeeName: { $first: "$Empleado.FirstName" }
      }
   },
   {
      $sort: { "totalProductos": -1 }
   },
   {
       $limit: 1
   }
])


//Cliente que compro mas productos
db.getCollection("OrderDetails").aggregate([
   {
      $group: {
         _id: "$OrderID",
         productos: { $sum:"$Quantity"}
      }
   },
   {
      $lookup: {
         from: "Orders",
         localField: "_id",
         foreignField: "OrderID",
         as: "Orden"
      }
   },   
   {
      $unwind: "$Orden"
   },
   {
      $lookup: {
         from: "Customers",
         localField: "Orden.CustomerID",
         foreignField: "CustomerID",
         as: "Cliente"
      }
   }, 
   {
      $unwind: "$Cliente"
   },
   {
      $group: {
         _id: "$Cliente.CustomerID",
         totalProductos: { $sum: "$productos" },
         nombreCliente: { $first: "$Cliente.CompanyName" }
      }
   },
   {
      $sort: { "totalProductos": -1 }
   },
   {
       $limit:1
   }
])

//Categoria con mas productos
db.getCollection("Products").aggregate([
   {
      $lookup: {
         from: "Categories",
         localField: "CategoryID",
         foreignField: "CategoryID",
         as: "Categoria"
      }
   }, 
   {
      $unwind: "$Categoria"
   },
   {
      $group: {
         _id: "$ProductID",
         productos: { $sum:"$UnitsInStock"},
         categoria: { $first: "$Categoria.CategoryName" }
      }
   },
   {
      $sort: { "productos": -1 }
   },
   {
       $limit:1
   },
])

//Numero de categorias
db.getCollection("Categories").aggregate([
   {
      $group: {
         _id: null,
         totalCategoriaas: { $sum: 1 }
      }
   }
])


//De que proveedor tengo mas productos
db.getCollection("Products").aggregate([
  {
      $lookup: {
         from: "Suppliers",
         localField: "SupplierID",
         foreignField: "SupplierID",
         as: "Proveedor"
      }
  }, 
   {
      $unwind: "$Proveedor"
   },
  { $group: 
      { 
          _id: "$Proveedor.SupplierID", 
          totalProductos: { $sum: "$UnitsInStock" }, 
          proveedor: { $first: "$Proveedor.CompanyName" }
      } 
  },
   {
      $sort: { "totalProductos": -1 }
   },
   {
       $limit:1
   },
])
